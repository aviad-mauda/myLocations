{"version":3,"sources":["entities/ScreensTypes.ts","utils/strings.ts","entities/ContentTypes.ts","entities/CategoryEntity.ts","redux/actions/index.ts","components/CustomButtons/CustomButtons.tsx","components/toolbar/Toolbar.tsx","components/category/Category.tsx","components/categories-list/CategoriesList.tsx","components/content/Content.tsx","App.tsx","redux/reducers/categories-reducer.ts","redux/reducers/category-reducer.ts","redux/reducers/content-reducer.ts","redux/reducers/screen-type-reducer.ts","redux/reducers/content-type-reducer.ts","redux/reducers/reducers.ts","redux/store.ts","index.tsx"],"names":["ScreensTypes","AppStrings","CATEGORY_LIST","NEW_CATEGORY","ContentTypes","CategoryEntity","name","this","changeScreenType","screenType","dispatch","type","payload","changeContentType","contentType","addCategory","category","updateCategory","categories","categoryNewName","deleteCategory","selectCategory","categoryToAdd","categoryName","addClicked","actions","ADD_CATEGORY","getButtons","content","className","id","onClick","CATEGORY_PROPERTIES","CATEGORY_DETAILS","some","EMPTY","saveClicked","updateClicked","deleteClicked","CustomButtons","useSelector","state","useDispatch","bindActionCreators","actionsCreators","createTitle","ToolBar","Category","props","getClasses","propsCategory","CategoriesList","map","getContent","onChange","e","target","value","Content","App","categoriesReducer","newState","action","alert","window","localStorage","setItem","JSON","stringify","filter","categoryReducer","contentReducer","screenTypeReducer","contentTypeReducer","reducers","combineReducers","initialState","getItem","parse","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.60fc7ea8.chunk.js","sourcesContent":["export const enum ScreensTypes {\n    CATEGORY_LIST,\n    NEW_CATEGORY,\n    CATEGORY_PROPERTIES\n}","export default class AppStrings { \n    public static readonly CATEGORY_LIST = 'Category List';\n    public static readonly NEW_CATEGORY = 'New Category';\n}","export const enum ContentTypes {\n    CATEGORY_DETAILS,\n    ADD_CATEGORY,\n    EMPTY\n}","export default class CategoryEntity {\n\n    name: String;\n\n    constructor(name: String) {\n        this.name = name;\n    }\n}","import CategoryEntity from \"../../entities/CategoryEntity\"\nimport { ContentTypes } from \"../../entities/ContentTypes\"\nimport { ScreensTypes } from \"../../entities/ScreensTypes\"\n\nexport const changeScreenType = (screenType: ScreensTypes) => {\n    return (dispatch: any) => {\n        dispatch({\n            type: \"changeScreenType\",\n            payload: screenType\n        })\n    }\n}\n\nexport const changeContentType = (contentType: ContentTypes) => {\n    return (dispatch: any) => {\n        dispatch({\n            type: \"changeContentType\",\n            payload: contentType\n        })\n    }\n}\n\nexport const addCategory = (category: CategoryEntity) => {\n    return (dispatch: any) => {\n        dispatch({\n            type: \"addCategory\",\n            payload: category\n        })\n    }\n}\n\nexport const updateCategory = (categories: CategoryEntity[], category: CategoryEntity, categoryNewName: string) => {\n    return (dispatch: any) => {\n        dispatch({\n            type: \"updateCategory\",\n            payload: {categories,category,categoryNewName}\n        })\n    }\n}\n\nexport const deleteCategory = (categories: CategoryEntity[], category: CategoryEntity) => {\n    return (dispatch: any) => {\n        dispatch({\n            type: \"deleteCategory\",\n            payload: {categories, category}\n        })\n    }\n}\n\nexport const selectCategory = (category: CategoryEntity) => {\n    return (dispatch: any) => {\n        dispatch({\n            type: \"selectCategory\",\n            payload: category\n        })\n    }\n}\n\nexport const categoryToAdd = (categoryName: String) => {\n    return (dispatch: any) => {\n        dispatch({\n            type: \"categoryToAdd\",\n            payload: categoryName\n        })\n    }\n}\n\n","import \"./CustomButton.css\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport CategoryEntity from \"../../entities/CategoryEntity\";\nimport { ContentTypes } from \"../../entities/ContentTypes\";\nimport { ScreensTypes } from \"../../entities/ScreensTypes\";\nimport { actionsCreators } from \"../../redux\";\nimport { RootState } from \"../../redux/reducers/reducers\";\n\nfunction addClicked(actions: any) {\n    actions.changeContentType(ContentTypes.ADD_CATEGORY);\n    actions.changeScreenType(ScreensTypes.NEW_CATEGORY);\n    actions.selectCategory({});\n}\n\nfunction updateClicked(actions: any) {\n    actions.changeContentType(ContentTypes.ADD_CATEGORY);\n    actions.changeScreenType(ScreensTypes.NEW_CATEGORY);\n}\n\nfunction saveClicked(actions: any, content: String, category: CategoryEntity, categories: CategoryEntity[]) {\n    if(category.name != null) {\n        actions.updateCategory(categories, category, content);\n        actions.changeScreenType(ScreensTypes.CATEGORY_PROPERTIES);\n        actions.changeContentType(ContentTypes.CATEGORY_DETAILS);\n\n        if(!categories.some((category: CategoryEntity) => category.name === content)) {\n            category.name = content;\n            actions.selectCategory(category);\n        }\n\n        return;\n    }\n    \n    actions.addCategory(new CategoryEntity(content));\n    actions.changeScreenType(ScreensTypes.CATEGORY_LIST);\n    actions.changeContentType(ContentTypes.EMPTY);\n    actions.selectCategory({});\n}\n\nfunction deleteClicked(actions: any, category: CategoryEntity, categories: CategoryEntity[]) {\n    actions.deleteCategory(categories, category);\n    actions.changeScreenType(ScreensTypes.CATEGORY_LIST);\n    actions.changeContentType(ContentTypes.EMPTY);\n    actions.selectCategory({});\n}\n\nfunction getButtons(screenType: ScreensTypes, content: String, actions: any, category: CategoryEntity, categories: CategoryEntity[]):JSX.Element {\n    switch(screenType) {\n        case ScreensTypes.NEW_CATEGORY:\n            return <button className=\"button\" id=\"save-button\" onClick={() => saveClicked(actions, content, category, categories)}>save</button>\n\n        case ScreensTypes.CATEGORY_PROPERTIES:\n            return <div>\n                <button className=\"button\" id=\"update-button\" onClick={() => updateClicked(actions)}>update</button>\n                <button className=\"button\" id=\"add-button\" onClick={() => addClicked(actions)}>Add New Category</button>\n                <button className=\"button\" id=\"delete-button\" onClick={() => deleteClicked(actions, category, categories)}>Delete Category</button>\n            </div>\n\n        case ScreensTypes.CATEGORY_LIST:\n        default:\n            return <button className=\"button\" id=\"add-button\" onClick={() => addClicked(actions)}>Add New Category</button>\n    }\n}\n\nexport default function CustomButtons() {\n\n    const {screenType, content, category, categories} = useSelector((state: RootState) => state);\n    const dispatch = useDispatch();\n    const actions = bindActionCreators(actionsCreators, dispatch);\n\n    return (\n        <div className=\"buttons\">\n            {getButtons(screenType, content, actions, category, categories)}\n        </div>\n    )\n}","import { useSelector } from \"react-redux\";\nimport CategoryEntity from \"../../entities/CategoryEntity\";\nimport { ScreensTypes } from \"../../entities/ScreensTypes\";\nimport { RootState } from \"../../redux/reducers/reducers\";\nimport AppStrings from \"../../utils/strings\";\nimport CustomButton from \"../CustomButtons/CustomButtons\";\n\nfunction createTitle(screenType: ScreensTypes, category: CategoryEntity) : String {\n    switch(screenType) {\n        case ScreensTypes.NEW_CATEGORY:\n            return AppStrings.NEW_CATEGORY;\n        case ScreensTypes.CATEGORY_PROPERTIES:\n            return category.name;\n        case ScreensTypes.CATEGORY_LIST:\n        default:\n            return AppStrings.CATEGORY_LIST;\n    }\n}\n\n\nexport default function ToolBar() {\n\n    const {screenType , category } = useSelector((state: RootState) => state);\n    \n    return (\n        <div className=\"toolbar\">\n            <h3> {createTitle(screenType, category)} </h3>\n            <CustomButton />\n            <hr/>\n        </div>\n    )\n}\n\n","import \"./Category.css\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport CategoryEntity from \"../../entities/CategoryEntity\";\nimport { RootState } from \"../../redux/reducers/reducers\";\nimport { bindActionCreators } from \"redux\";\nimport { actionsCreators } from \"../../redux\";\nimport { ScreensTypes } from \"../../entities/ScreensTypes\";\nimport { ContentTypes } from \"../../entities/ContentTypes\";\n\nexport default function Category(props: any) {\n    const {category} = useSelector((state: RootState) => state);\n    const dispatch = useDispatch();\n    const actions = bindActionCreators(actionsCreators, dispatch);\n    \n    return (\n        <div className={getClasses(category, props.category)} onClick={() => selectCategory(actions, props.category)}>\n            {props.category.name}\n        </div>\n    )\n}\n\nfunction selectCategory (actions: any, category: CategoryEntity) {\n    actions.selectCategory(category);\n    actions.changeScreenType(ScreensTypes.CATEGORY_PROPERTIES);\n    actions.changeContentType(ContentTypes.CATEGORY_DETAILS);\n}\n\nfunction getClasses(category: CategoryEntity, propsCategory: CategoryEntity) : string {\n    return category.name === propsCategory.name ? \"category clicked\" : \"category\";\n}\n","import \"./CategoriesList.css\";\nimport { useSelector } from \"react-redux\";\nimport CategoryEntity from \"../../entities/CategoryEntity\";\nimport { RootState } from \"../../redux/reducers/reducers\";\nimport Category from \"../category/Category\";\n\nexport default function CategoriesList() {\n\n    const categories : Array<CategoryEntity> = useSelector((state: RootState) => state.categories);\n\n    return (\n        <div className=\"categories-list\">\n            {categories.map(category => <Category key={category.name} category={category} />)}\n        </div>\n    )\n}","import \"./Content.css\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport CategoryEntity from \"../../entities/CategoryEntity\";\nimport { RootState } from \"../../redux/reducers/reducers\";\nimport { bindActionCreators } from \"redux\";\nimport { actionsCreators } from \"../../redux\";\nimport { ContentTypes } from \"../../entities/ContentTypes\";\n\nfunction getContent(contentType: ContentTypes, category: CategoryEntity, actions: any):JSX.Element {\n    switch(contentType) {\n        case ContentTypes.CATEGORY_DETAILS:\n            return <div>\n                <span className=\"category-name\">Category Name:</span> {category.name}\n            </div>;\n        case ContentTypes.ADD_CATEGORY:\n            return <div>\n                <span className=\"category-name\">Category Name:</span>\n                <input type=\"text\" id=\"categoryNameAdded\" onChange={(e) => {actions.categoryToAdd(e.target.value)}}></input>\n            </div>;\n        case ContentTypes.EMPTY:\n        default:\n            return <span></span>;\n    }\n}\n\nexport default function Content() {\n\n    const {contentType, category} = useSelector((state: RootState) => state);\n    const dispatch = useDispatch();\n    const actions = bindActionCreators(actionsCreators, dispatch);\n    \n    return (\n        <div className=\"content\">\n             {getContent(contentType, category, actions)}\n        </div>\n    )\n}","import './App.css';\nimport ToolBar from './components/toolbar/Toolbar';\nimport CategoriesList from './components/categories-list/CategoriesList';\nimport Content from './components/content/Content';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ToolBar />\n      <div className=\"app-body\">\n        <CategoriesList />\n        <Content />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import CategoryEntity from \"../../entities/CategoryEntity\";\n\nconst categoriesReducer = (state: CategoryEntity[] = [], action: any): CategoryEntity[]  => {\n    var newState;\n    switch (action.type) {\n        case \"addCategory\":\n            if(state.some((category) => category.name === action.payload.name)) {\n                alert(\"category already exist\");\n                \n                return state;\n            }\n\n            newState = [...state, action.payload];\n\n            window.localStorage.setItem('categories', JSON.stringify(newState));\n\n            return newState;\n        case \"updateCategory\":\n            if(action.payload.categories.some((category: CategoryEntity) => category.name === action.payload.categoryNewName )) {\n                alert(\"category already exist\");\n                \n                return state;\n            }\n            \n            newState = action.payload.categories.map((category: CategoryEntity) => \n                category.name === action.payload.category.name ? {...category, name: action.payload.categoryNewName } : category\n            )\n\n            window.localStorage.setItem('categories', JSON.stringify(newState));\n\n            return newState;\n        case \"deleteCategory\":\n            newState = action.payload.categories.filter((category: CategoryEntity) => category.name !== action.payload.category.name);\n            window.localStorage.setItem('categories', JSON.stringify(newState));\n\n            return newState;\n        default:\n            return state;\n    }\n}\n\nexport default categoriesReducer;","const categoryReducer = (state = {}, action: any) => {\n    switch (action.type) {\n        case \"selectCategory\":\n            return action.payload;\n        default:\n            return state;\n    }\n}\n\nexport default categoryReducer;","const contentReducer = (state = {}, action: any) => {\n    switch (action.type) {\n        case \"categoryToAdd\":\n            return action.payload;\n        default:\n            return state;\n    }\n}\n\nexport default contentReducer;","import { ScreensTypes } from \"../../entities/ScreensTypes\";\n\nconst screenTypeReducer = (state = ScreensTypes.CATEGORY_LIST, action: any) => {\n    switch (action.type) {\n        case \"changeScreenType\":\n            return state = action.payload;\n        default:\n            return state;\n    }\n}\n\nexport default screenTypeReducer;\n","import { ContentTypes } from \"../../entities/ContentTypes\";\n\nconst contentTypeReducer = (state = ContentTypes.EMPTY, action: any) => {\n    switch (action.type) {\n        case \"changeContentType\":\n            return state = action.payload;\n        default:\n            return state;\n    }\n}\n\nexport default contentTypeReducer;\n","import { combineReducers } from \"redux\";\nimport categoriesReducer from \"./categories-reducer\";\nimport categoryReducer from \"./category-reducer\";\nimport contentReducer from \"./content-reducer\";\nimport screenTypeReducer from \"./screen-type-reducer\";\nimport contentTypeReducer from \"./content-type-reducer\";\n\nexport const reducers = combineReducers({\n    categories: categoriesReducer, \n    screenType: screenTypeReducer,\n    category: categoryReducer,\n    content: contentReducer,\n    contentType: contentTypeReducer\n});\n\nexport type RootState = ReturnType<typeof reducers>","import { createStore , applyMiddleware} from \"redux\";\nimport { reducers } from \"./reducers/reducers\";\nimport thunk from \"redux-thunk\";\n\nvar categories;\n\nif(window.localStorage.getItem('categories') == null) {\n    categories = [];\n} else {\n    categories = JSON.parse(window.localStorage.getItem('categories') as string);\n}\n\nconst initialState = { \n    categories: categories\n};\n\nconst store = createStore(\n    reducers,\n    initialState,\n    applyMiddleware(thunk)\n)\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from \"react-redux\"\nimport store from \"./redux/store\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}